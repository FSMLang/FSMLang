/**
	top_level.h

	This file automatically generated by FSMLang
*/

#ifndef _TOP_LEVEL_H_
#define _TOP_LEVEL_H_


#include "test.h"
#define NUM_INTS (2)
#define NUM_CHARS (20)
#define INIT_FSM_DATA {.u.bop = {[0 ... (NUM_CHARS - 1)] = '\0'}  \
                       , .u.foo.a = {[0 ... (NUM_INTS - 1)] = 0}  \
                       , .u.foo.count_ints = 0                    \
                       , .u.beep.f = 0                            \
                       }

#ifdef NEW_MACHINE_DEBUG
#include <stdio.h>
#include <stdlib.h>
#endif

#include <stdbool.h>
#define FSM_VERSION "1.40"

#define RUN_STATE_MACHINE(A,B) \
	((*(A)->fsm)((A),((pNEW_MACHINE_EVENT) B)))

#ifndef INIT_FSM_DATA
#define INIT_FSM_DATA {0}
#endif
#define DECLARE_NEW_MACHINE_MACHINE(A) \
NEW_MACHINE (A) =\
{\
	INIT_FSM_DATA,\
	newMachine_s1,\
	newMachine_noEvent,\
	&newMachine_action_array,\
	newMachineFSM\
};\
NEW_MACHINE *p##A = &A;

/* Event naming convenience macros. */
#undef THIS
#define THIS(A) newMachine_##A
#undef NEW_MACHINE
#define NEW_MACHINE(A) newMachine_##A
#undef SUB_MACHINE1
#define SUB_MACHINE1(A) newMachine_subMachine1_##A
#undef SUB_MACHINE2
#define SUB_MACHINE2(A) newMachine_subMachine2_##A

/*
	Event Cross Reference:

	    0  newMachine_e1
	    1  newMachine_e2
	    2  newMachine_e3
	    3  newMachine_e4
	    4  newMachine_eShared
	    5  newMachine_noEvent
	    6  newMachine_numEvents
	    7  newMachine_subMachine1_eShared
	    8  newMachine_subMachine1_ee2
	    9  newMachine_subMachine1_ee3
	   10  newMachine_subMachine1_noEvent
	   11  newMachine_subMachine2_eee1
	   12  newMachine_subMachine2_eee2
	   13  newMachine_subMachine2_eee3
	   14  newMachine_subMachine2_noEvent
	   15  subMachine2_numAllEvents

*/
typedef enum NEW_MACHINE_EVENT_ENUM {
	 newMachine_e1
	, newMachine_e2
	, newMachine_e3
	, newMachine_e4
	, newMachine_eShared
	, newMachine_noEvent
	, newMachine_numEvents
	, newMachine_subMachine1_eShared
	, newMachine_subMachine1_ee2
	, newMachine_subMachine1_ee3
	, newMachine_subMachine1_noEvent
	, newMachine_subMachine2_eee1
	, newMachine_subMachine2_eee2
	, newMachine_subMachine2_eee3
	, newMachine_subMachine2_noEvent
	, newMachine_numAllEvents
} NEW_MACHINE_EVENT_ENUM;

#undef ACTION_RETURN_TYPE
#define ACTION_RETURN_TYPE NEW_MACHINE_EVENT_ENUM
typedef struct _subMachine2_e1_data_ {
	char * cp ;
} NEW_MACHINE_E1_DATA, *pNEW_MACHINE_E1_DATA;

typedef struct _subMachine2_e2_data_ {
	int  i ;
	float  f ;
} NEW_MACHINE_E2_DATA, *pNEW_MACHINE_E2_DATA;

typedef struct _subMachine2_e3_data_ {
	int  i ;
	struct {
		int  i ;
		float  f ;
	} s;
} NEW_MACHINE_E3_DATA, *pNEW_MACHINE_E3_DATA;

typedef union {
	NEW_MACHINE_E1_DATA e1_data;
	NEW_MACHINE_E2_DATA e2_data;
	NEW_MACHINE_E3_DATA e3_data;
} NEW_MACHINE_EVENT_DATA, *pNEW_MACHINE_EVENT_DATA;

typedef struct {
	NEW_MACHINE_EVENT_ENUM event;
	NEW_MACHINE_EVENT_DATA event_data;
} NEW_MACHINE_EVENT, *pNEW_MACHINE_EVENT;

#ifdef NEW_MACHINE_DEBUG
extern char *NEW_MACHINE_EVENT_NAMES[];
#endif

typedef enum {
	 newMachine_s1
	, newMachine_s2
	, newMachine_s3
	, newMachine_s4
	, newMachine_numStates
} NEW_MACHINE_STATE;

#ifdef NEW_MACHINE_DEBUG
extern char *NEW_MACHINE_STATE_NAMES[];
#endif

typedef struct _newMachine_data_struct_ NEW_MACHINE_DATA, *pNEW_MACHINE_DATA;
typedef struct _newMachine_struct_ NEW_MACHINE, *pNEW_MACHINE;
#undef FSM_TYPE_PTR
#define FSM_TYPE_PTR pNEW_MACHINE
extern NEW_MACHINE newMachine;

extern pNEW_MACHINE pnewMachine;

typedef NEW_MACHINE_EVENT_ENUM (*NEW_MACHINE_ACTION_FN)(pNEW_MACHINE);

typedef NEW_MACHINE_STATE (*NEW_MACHINE_TRANSITION_FN)(pNEW_MACHINE,NEW_MACHINE_EVENT_ENUM);

typedef void (*NEW_MACHINE_FSM)(pNEW_MACHINE,pNEW_MACHINE_EVENT);

void newMachineFSM(pNEW_MACHINE,pNEW_MACHINE_EVENT);

/* Sub Machine Declarations */

/* enumerate sub-machines */
typedef enum {
	 newMachine_subMachine1
	, newMachine_firstSubMachine = newMachine_subMachine1
	,  newMachine_subMachine2
	, newMachine_numSubMachines
} NEW_MACHINE_SUB_MACHINES;

typedef NEW_MACHINE_EVENT_ENUM (*NEW_MACHINE_SUB_MACHINE_FN)(NEW_MACHINE_EVENT_ENUM);
typedef struct _newMachine_sub_fsm_if_ NEW_MACHINE_SUB_FSM_IF, *pNEW_MACHINE_SUB_FSM_IF;
struct _newMachine_sub_fsm_if_
{
	NEW_MACHINE_EVENT_ENUM                first_event;
	NEW_MACHINE_EVENT_ENUM                last_event;
	NEW_MACHINE_SUB_MACHINE_FN       subFSM;
};

extern pNEW_MACHINE_SUB_FSM_IF newMachine_sub_fsm_if_array[newMachine_numSubMachines];

extern NEW_MACHINE_SUB_FSM_IF subMachine1_sub_fsm_if;
extern NEW_MACHINE_SUB_FSM_IF subMachine2_sub_fsm_if;

/* Some sub-machines share parent events. */
typedef void (*NEW_MACHINE_DATA_TRANSLATION_FN)(pNEW_MACHINE);
typedef struct _newMachine_shared_event_str_ NEW_MACHINE_SHARED_EVENT_STR, *pNEW_MACHINE_SHARED_EVENT_STR;
struct _newMachine_shared_event_str_
{	NEW_MACHINE_EVENT_ENUM      event;
	NEW_MACHINE_DATA_TRANSLATION_FN  data_translation_fn;
	pNEW_MACHINE_SUB_FSM_IF          psub_fsm_if;
};
extern NEW_MACHINE_EVENT_ENUM pass_shared_event(pNEW_MACHINE,pNEW_MACHINE_SHARED_EVENT_STR[]);

extern NEW_MACHINE_SHARED_EVENT_STR subMachine1_share_newMachine_eShared_str;
extern pNEW_MACHINE_SHARED_EVENT_STR sharing_newMachine_eShared[];


struct _newMachine_data_struct_ {
	struct {
		struct {
			int  a [NUM_INTS];
			int  count_ints ;
		} foo;
		struct {
			float  f ;
		} beep;
		int  e3_int ;
		char  bop [NUM_CHARS];
	} u;
};

typedef struct _newMachine_action_trans_struct_ {
	NEW_MACHINE_ACTION_FN	action;
	NEW_MACHINE_TRANSITION_FN	transition;
} NEW_MACHINE_ACTION_TRANS, *pNEW_MACHINE_ACTION_TRANS;

extern const NEW_MACHINE_ACTION_TRANS newMachine_action_array[newMachine_numEvents][newMachine_numStates];

struct _newMachine_struct_ {
	NEW_MACHINE_DATA					data;
	NEW_MACHINE_STATE					state;
	NEW_MACHINE_EVENT_ENUM					event;
	NEW_MACHINE_ACTION_TRANS const	(*actionArray)[newMachine_numEvents][newMachine_numStates];
	pNEW_MACHINE_SUB_FSM_IF	(*subMachineArray)[newMachine_numSubMachines];
	NEW_MACHINE_FSM						fsm;
};

NEW_MACHINE_EVENT_ENUM newMachine_a1(pNEW_MACHINE);
NEW_MACHINE_EVENT_ENUM newMachine_a2(pNEW_MACHINE);
NEW_MACHINE_EVENT_ENUM newMachine_doNothing(pNEW_MACHINE);
NEW_MACHINE_EVENT_ENUM newMachine_shareSharedEvent(pNEW_MACHINE);
NEW_MACHINE_EVENT_ENUM newMachine_noAction(pNEW_MACHINE);


void newMachine_baz(pNEW_MACHINE,NEW_MACHINE_STATE);

NEW_MACHINE_STATE newMachine_transitionFn(pNEW_MACHINE,NEW_MACHINE_EVENT_ENUM);
NEW_MACHINE_STATE newMachine_transitionFn1(pNEW_MACHINE,NEW_MACHINE_EVENT_ENUM);
NEW_MACHINE_STATE newMachine_transitionTos4(pNEW_MACHINE,NEW_MACHINE_EVENT_ENUM);

NEW_MACHINE_STATE newMachine_noTransitionFn(pNEW_MACHINE,NEW_MACHINE_EVENT_ENUM);

void newMachine_translate_e1_data(pNEW_MACHINE_DATA,pNEW_MACHINE_E1_DATA);
void newMachine_translate_e2_data(pNEW_MACHINE_DATA,pNEW_MACHINE_E2_DATA);
void newMachine_translate_e3_data(pNEW_MACHINE_DATA,pNEW_MACHINE_E3_DATA);


#endif
