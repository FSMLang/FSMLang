/**
	sub_machine1.c

	This file automatically generated by FSMLang
*/

#include "sub_machine1_priv.h"
#include <stddef.h>


#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif

static TOP_LEVEL_EVENT sub_machine1FSM(pSUB_MACHINE1,TOP_LEVEL_EVENT);

static TOP_LEVEL_EVENT s1_stateFn(pSUB_MACHINE1,TOP_LEVEL_EVENT);
static TOP_LEVEL_EVENT s2_stateFn(pSUB_MACHINE1,TOP_LEVEL_EVENT);
static TOP_LEVEL_EVENT s3_stateFn(pSUB_MACHINE1,TOP_LEVEL_EVENT);

static const SUB_MACHINE1_STATE_FN sub_machine1_state_fn_array[sub_machine1_numStates] = 
{
	  s1_stateFn
	, s2_stateFn
	, s3_stateFn
};


TOP_LEVEL_EVENT THIS(sub_machine_fn)(TOP_LEVEL_EVENT e)
{
	return sub_machine1FSM(psub_machine1,e);
}

TOP_LEVEL_SUB_FSM_IF top_level_sub_machine1_sub_fsm_if =
{
	  .subFSM = THIS(sub_machine_fn)
	, .index = sub_machine1_e
	, .first_event = THIS(firstEvent)
	, .last_event = THIS(noEvent)
};

SUB_MACHINE1 sub_machine1 = {
	.state = sub_machine1_s1
	, .event = THIS(e1)
	, .statesArray = &sub_machine1_state_fn_array
	, .fsm = sub_machine1FSM
}
;

pSUB_MACHINE1 psub_machine1 = &sub_machine1;


#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
TOP_LEVEL_EVENT sub_machine1FSM(pSUB_MACHINE1 pfsm, TOP_LEVEL_EVENT event)
{
	TOP_LEVEL_EVENT e = event;

	while ((e != THIS(noEvent))
	       && (e >= THIS(firstEvent))
	      )
	{

#ifdef TOP_LEVEL_SUB_MACHINE1_DEBUG
if ((EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
    && (e >= THIS(firstEvent))
    && (e < THIS(noEvent))
   )
{
	DBG_PRINTF("event: %s; state: %s"
,SUB_MACHINE1_EVENT_NAMES[e - THIS(firstEvent)]
,SUB_MACHINE1_STATE_NAMES[pfsm->state]
);
}
#endif

		/* This is read-only data to facilitate error reporting in action functions */
		pfsm->event = e;

		if ((e >= THIS(firstEvent))
		    && (e < THIS(noEvent))
			)
		{
		e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));
		}

	}

	return e == THIS(noEvent) ? PARENT(noEvent) : e;
}

static TOP_LEVEL_EVENT s1_stateFn(pSUB_MACHINE1 pfsm,TOP_LEVEL_EVENT e)
{
	TOP_LEVEL_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(e1):
		retVal = UFMN(a1)(pfsm);
		pfsm->state = sub_machine1_s2;
		break;
	default:
		DBG_PRINTF("sub_machine1_noAction");
		break;
	}

	return retVal;
}

static TOP_LEVEL_EVENT s2_stateFn(pSUB_MACHINE1 pfsm,TOP_LEVEL_EVENT e)
{
	TOP_LEVEL_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(e2):
		retVal = UFMN(a2)(pfsm);
		pfsm->state = UFMN(checkTransition)(pfsm,e);
		break;
	default:
		DBG_PRINTF("sub_machine1_noAction");
		break;
	}

	return retVal;
}

static TOP_LEVEL_EVENT s3_stateFn(pSUB_MACHINE1 pfsm,TOP_LEVEL_EVENT e)
{
	TOP_LEVEL_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(e3):
		retVal = UFMN(a3)(pfsm);
		pfsm->state = sub_machine1_s1;
		break;
	default:
		DBG_PRINTF("sub_machine1_noAction");
		break;
	}

	return retVal;
}


ACTION_RETURN_TYPE __attribute__((weak)) UFMN(a1)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return THIS(noEvent);
}

ACTION_RETURN_TYPE __attribute__((weak)) UFMN(a2)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return THIS(noEvent);
}

ACTION_RETURN_TYPE __attribute__((weak)) UFMN(a3)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return THIS(noEvent);
}


#ifdef TOP_LEVEL_SUB_MACHINE1_DEBUG
char *SUB_MACHINE1_EVENT_NAMES[] = {
	 "sub_machine1_e1"
	,"sub_machine1_e2"
	,"sub_machine1_e3"
	, "sub_machine1_noEvent"
	, "sub_machine1_numEvents"
};

char *SUB_MACHINE1_STATE_NAMES[] = {
	 "sub_machine1_s1"
	,"sub_machine1_s2"
	,"sub_machine1_s3"
};

#endif
