/**
	another.h

	This file automatically generated by FSMLang
*/

#ifndef _ANOTHER_H_
#define _ANOTHER_H_

#ifdef ANOTHER_NEW_MACHINE_DEBUG
#include <stdio.h>
#include <stdlib.h>
#endif

#include <stdbool.h>
#define FSM_VERSION "1.41"

#define RUN_STATE_MACHINE(A,B) \
	((*(A)->fsm)((A),((ANOTHER_NEW_MACHINE_EVENT) B)))

#ifndef INIT_FSM_DATA
#define INIT_FSM_DATA {0}
#endif
#define DECLARE_ANOTHER_NEW_MACHINE_MACHINE(A) \
ANOTHER_NEW_MACHINE (A) =\
{\
	anotherNewMachine_s1,\
	anotherNewMachine_noEvent,\
	&anotherNewMachine_state_fn_array,\
	anotherNewMachineFSM\
};\
ANOTHER_NEW_MACHINE *p##A = &A;

/* Event naming convenience macros. */
#undef THIS
#define THIS(A) anotherNewMachine_##A
#undef ANOTHER_NEW_MACHINE
#define ANOTHER_NEW_MACHINE(A) anotherNewMachine_##A
#undef ANOTHER_SUB_MACHINE1
#define ANOTHER_SUB_MACHINE1(A) anotherNewMachine_anotherSubMachine1_##A
#undef ANOTHER_SUB_MACHINE1ANOTHER_SUB_SUB_MACHINE1
#define ANOTHER_SUB_MACHINE1ANOTHER_SUB_SUB_MACHINE1(A) anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_##A
#undef ANOTHER_SUB_MACHINE2
#define ANOTHER_SUB_MACHINE2(A) anotherNewMachine_anotherSubMachine2_##A

/*
	Event Cross Reference:

	    0  anotherNewMachine_e1
	    1  anotherNewMachine_e2
	    2  anotherNewMachine_e3
	    3  anotherNewMachine_e4
	    4  anotherNewMachine_noEvent
	    5  anotherNewMachine_numEvents
	    6  anotherNewMachine_anotherSubMachine1_ee1
	    7  anotherNewMachine_anotherSubMachine1_ee2
	    8  anotherNewMachine_anotherSubMachine1_ee3
	    9  anotherNewMachine_anotherSubMachine1_e1
	   10  anotherNewMachine_anotherSubMachine1_noEvent
	   11  anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y1
	   12  anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y2
	   13  anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_e1
	   14  anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_ee1
	   15  anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_noEvent
	   16  anotherNewMachine_anotherSubMachine2_eee1
	   17  anotherNewMachine_anotherSubMachine2_eee2
	   18  anotherNewMachine_anotherSubMachine2_eee3
	   19  anotherNewMachine_anotherSubMachine2_noEvent
	   20  anotherNewMachine_numAllEvents

*/
typedef enum ANOTHER_NEW_MACHINE_EVENT {
	 anotherNewMachine_e1
	, anotherNewMachine_e2
	, anotherNewMachine_e3
	, anotherNewMachine_e4
	, anotherNewMachine_noEvent
	, anotherNewMachine_numEvents
	, anotherNewMachine_anotherSubMachine1_ee1
	, anotherNewMachine_anotherSubMachine1_ee2
	, anotherNewMachine_anotherSubMachine1_ee3
	, anotherNewMachine_anotherSubMachine1_e1
	, anotherNewMachine_anotherSubMachine1_noEvent
	, anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y1
	, anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y2
	, anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_e1
	, anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_ee1
	, anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_noEvent
	, anotherNewMachine_anotherSubMachine2_eee1
	, anotherNewMachine_anotherSubMachine2_eee2
	, anotherNewMachine_anotherSubMachine2_eee3
	, anotherNewMachine_anotherSubMachine2_noEvent
	, anotherNewMachine_numAllEvents
} ANOTHER_NEW_MACHINE_EVENT;

#undef ACTION_RETURN_TYPE
#define ACTION_RETURN_TYPE ANOTHER_NEW_MACHINE_EVENT
#ifdef ANOTHER_NEW_MACHINE_DEBUG
extern char *ANOTHER_NEW_MACHINE_EVENT_NAMES[];
#endif

typedef enum {
	 anotherNewMachine_s1
	, anotherNewMachine_s2
	, anotherNewMachine_s3
	, anotherNewMachine_numStates
} ANOTHER_NEW_MACHINE_STATE;

#ifdef ANOTHER_NEW_MACHINE_DEBUG
extern char *ANOTHER_NEW_MACHINE_STATE_NAMES[];
#endif

typedef struct _anotherNewMachine_struct_ ANOTHER_NEW_MACHINE, *pANOTHER_NEW_MACHINE;
#undef FSM_TYPE_PTR
#define FSM_TYPE_PTR pANOTHER_NEW_MACHINE
extern ANOTHER_NEW_MACHINE anotherNewMachine;

extern pANOTHER_NEW_MACHINE panotherNewMachine;

typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_NEW_MACHINE_ACTION_FN)(pANOTHER_NEW_MACHINE);

typedef ANOTHER_NEW_MACHINE_STATE (*ANOTHER_NEW_MACHINE_TRANSITION_FN)(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

typedef void (*ANOTHER_NEW_MACHINE_FSM)(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

void anotherNewMachineFSM(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

/* Sub Machine Declarations */

/* enumerate sub-machines */
typedef enum {
	 anotherNewMachine_anotherSubMachine1
	, anotherNewMachine_firstSubMachine = anotherNewMachine_anotherSubMachine1
	,  anotherNewMachine_anotherSubMachine2
	, anotherNewMachine_numSubMachines
} ANOTHER_NEW_MACHINE_SUB_MACHINES;

typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_NEW_MACHINE_SUB_MACHINE_FN)(ANOTHER_NEW_MACHINE_EVENT);
typedef struct _anotherNewMachine_sub_fsm_if_ ANOTHER_NEW_MACHINE_SUB_FSM_IF, *pANOTHER_NEW_MACHINE_SUB_FSM_IF;
struct _anotherNewMachine_sub_fsm_if_
{
	ANOTHER_NEW_MACHINE_EVENT                first_event;
	ANOTHER_NEW_MACHINE_EVENT                last_event;
	ANOTHER_NEW_MACHINE_SUB_MACHINE_FN       subFSM;
};

extern pANOTHER_NEW_MACHINE_SUB_FSM_IF anotherNewMachine_sub_fsm_if_array[anotherNewMachine_numSubMachines];

extern ANOTHER_NEW_MACHINE_SUB_FSM_IF anotherSubMachine1_sub_fsm_if;
extern ANOTHER_NEW_MACHINE_SUB_FSM_IF anotherSubMachine2_sub_fsm_if;

/* Some sub-machines share parent events. */
typedef void (*ANOTHER_NEW_MACHINE_DATA_TRANSLATION_FN)(pANOTHER_NEW_MACHINE);
typedef struct _anotherNewMachine_shared_event_str_ ANOTHER_NEW_MACHINE_SHARED_EVENT_STR, *pANOTHER_NEW_MACHINE_SHARED_EVENT_STR;
struct _anotherNewMachine_shared_event_str_
{	ANOTHER_NEW_MACHINE_EVENT      event;
	ANOTHER_NEW_MACHINE_DATA_TRANSLATION_FN  data_translation_fn;
	pANOTHER_NEW_MACHINE_SUB_FSM_IF          psub_fsm_if;
};
extern ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_pass_shared_event(pANOTHER_NEW_MACHINE,pANOTHER_NEW_MACHINE_SHARED_EVENT_STR[]);

bar extern ANOTHER_NEW_MACHINE_SHARED_EVENT_STR anotherSubMachine1_share_anotherNewMachine_e1_str;
foo extern pANOTHER_NEW_MACHINE_SHARED_EVENT_STR sharing_anotherNewMachine_e1[];


typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_NEW_MACHINE_STATE_FN)(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

extern const ANOTHER_NEW_MACHINE_STATE_FN anotherNewMachine_state_fn_array[anotherNewMachine_numStates];

struct _anotherNewMachine_struct_ {
	ANOTHER_NEW_MACHINE_STATE					state;
	ANOTHER_NEW_MACHINE_EVENT					event;
	ANOTHER_NEW_MACHINE_STATE_FN const	(*statesArray)[anotherNewMachine_numStates];
	pANOTHER_NEW_MACHINE_SUB_FSM_IF	(*subMachineArray)[anotherNewMachine_numSubMachines];
	ANOTHER_NEW_MACHINE_FSM						fsm;
};

ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_s1_stateFn(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);
ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_s2_stateFn(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);
ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_s3_stateFn(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_a1(pANOTHER_NEW_MACHINE);
ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_a2(pANOTHER_NEW_MACHINE);

void anotherNewMachine_baz(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_STATE);

ANOTHER_NEW_MACHINE_STATE anotherNewMachine_transitionFn(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);
ANOTHER_NEW_MACHINE_STATE anotherNewMachine_transitionFn1(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

#endif
