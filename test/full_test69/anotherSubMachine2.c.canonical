/**
	anotherSubMachine2.c

	This file automatically generated by FSMLang
*/

#include "anotherSubMachine2.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif


const ANOTHER_SUB_MACHINE2_STATE_FN anotherSubMachine2_state_fn_array[anotherSubMachine2_numStates] = 
{
	  anotherSubMachine2_sss1_stateFn
	, anotherSubMachine2_sss2_stateFn
	, anotherSubMachine2_sss3_stateFn
};

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine2_sub_machine_fn(ANOTHER_NEW_MACHINE_EVENT e)
{
	return anotherSubMachine2FSM(panotherSubMachine2, e);
}


ANOTHER_NEW_MACHINE_SUB_FSM_IF anotherSubMachine2_sub_fsm_if =
{
		.subFSM = anotherSubMachine2_sub_machine_fn
	, .first_event = anotherNewMachine_anotherSubMachine2_eee1
	, .last_event = anotherNewMachine_anotherSubMachine2_eee3
};

ANOTHER_SUB_MACHINE2 anotherSubMachine2 = {
	anotherSubMachine2_sss1,
	anotherNewMachine_anotherSubMachine2_eee1,
	&anotherSubMachine2_state_fn_array,
	anotherSubMachine2FSM
};

pANOTHER_SUB_MACHINE2 panotherSubMachine2 = &anotherSubMachine2;


#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
ANOTHER_NEW_MACHINE_EVENT anotherSubMachine2FSM(pANOTHER_SUB_MACHINE2 pfsm, ANOTHER_NEW_MACHINE_EVENT event)
{
	ANOTHER_NEW_MACHINE_EVENT e = event;

	while (
		(e != THIS(noEvent))
		&& (e >= THIS(eee1))
	)
	{

#ifdef ANOTHER_SUB_MACHINE2_DEBUG
if (EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
{
	DBG_PRINTF("event: %s; state: %s"
,ANOTHER_SUB_MACHINE2_EVENT_NAMES[e - THIS(eee1)]
,ANOTHER_SUB_MACHINE2_STATE_NAMES[pfsm->state]
);
}
#endif

	/* This is read-only data to facilitate error reporting in action functions */
	pfsm->event = e;

		e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));

	}

	return e == THIS(noEvent) ? PARENT(noEvent) : e;
}

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine2_sss1_stateFn(pANOTHER_SUB_MACHINE2 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(eee1):
		retVal = anotherSubMachine2_aaa1(pfsm);
		pfsm->state = anotherSubMachine2_sss2;
		break;
	case THIS(eee2):
		retVal = anotherSubMachine2_aaa2(pfsm);
		pfsm->state = anotherSubMachine2_sss3;
		break;
	default:
		DBG_PRINTF("anotherSubMachine2_noAction");
		break;
	}

	return retVal;
}

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine2_sss2_stateFn(pANOTHER_SUB_MACHINE2 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherSubMachine2_noAction");
		break;
	}

	return retVal;
/* we only just now know we did not use this */
	(void) pfsm;
}

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine2_sss3_stateFn(pANOTHER_SUB_MACHINE2 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherSubMachine2_noAction");
		break;
	}

	return retVal;
/* we only just now know we did not use this */
	(void) pfsm;
}


ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) anotherSubMachine2_aaa1(pANOTHER_SUB_MACHINE2 pfsm)
{
	DBG_PRINTF("weak: anotherSubMachine2_aaa1");
	(void) pfsm;
	return THIS(noEvent);
}

ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) anotherSubMachine2_aaa2(pANOTHER_SUB_MACHINE2 pfsm)
{
	DBG_PRINTF("weak: anotherSubMachine2_aaa2");
	(void) pfsm;
	return THIS(noEvent);
}



#ifdef ANOTHER_SUB_MACHINE2_DEBUG
char *ANOTHER_SUB_MACHINE2_EVENT_NAMES[] = {
	 "anotherSubMachine2_eee1"
	, "anotherSubMachine2_eee2"
	, "anotherSubMachine2_eee3"
	, "anotherSubMachine2_noEvent"
	, "anotherSubMachine2_numEvents"
};

char *ANOTHER_SUB_MACHINE2_STATE_NAMES[] = {
	 "anotherSubMachine2_sss1"
	,"anotherSubMachine2_sss2"
	,"anotherSubMachine2_sss3"
};

#endif
