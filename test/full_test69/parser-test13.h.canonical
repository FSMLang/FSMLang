/**
	parser-test13.h

	This file automatically generated by FSMLang
*/

#ifndef _PARSER_TEST13_H_
#define _PARSER_TEST13_H_

#ifdef NEW_MACHINE_DEBUG
#include <stdio.h>
#include <stdlib.h>
#endif

#include <stdbool.h>
#define FSM_VERSION "1.40"

#define RUN_STATE_MACHINE(A,B) \
	((*(A)->fsm)((A),((NEW_MACHINE_EVENT) B)))

#ifndef INIT_FSM_DATA
#define INIT_FSM_DATA {0}
#endif
#define DECLARE_NEW_MACHINE_MACHINE(A) \
NEW_MACHINE (A) =\
{\
	newMachine_s1,\
	newMachine_noEvent,\
	&newMachine_state_fn_array,\
	newMachineFSM\
};\
NEW_MACHINE *p##A = &A;

/* Event naming convenience macros. */
#undef THIS
#define THIS(A) newMachine_##A
#undef NEW_MACHINE
#define NEW_MACHINE(A) newMachine_##A
#undef SUB_MACHINE1
#define SUB_MACHINE1(A) newMachine_subMachine1_##A
#undef SUB_MACHINE2
#define SUB_MACHINE2(A) newMachine_subMachine2_##A

typedef enum NEW_MACHINE_EVENT {
	 newMachine_e1
	, newMachine_e2
	, newMachine_e3
	, newMachine_e4
	, newMachine_noEvent
	, newMachine_numEvents
	, newMachine_subMachine1_ee1
	, newMachine_subMachine1_ee2
	, newMachine_subMachine1_ee3
	, newMachine_subMachine1_noEvent
	, newMachine_subMachine2_eee1
	, newMachine_subMachine2_eee2
	, newMachine_subMachine2_eee3
	, newMachine_subMachine2_noEvent
	, newMachine_numAllEvents
} NEW_MACHINE_EVENT;

#undef ACTION_RETURN_TYPE
#define ACTION_RETURN_TYPE NEW_MACHINE_EVENT
#ifdef NEW_MACHINE_DEBUG
extern char *NEW_MACHINE_EVENT_NAMES[];
#endif

typedef enum {
	 newMachine_s1
	, newMachine_s2
	, newMachine_s3
	, newMachine_numStates
} NEW_MACHINE_STATE;

#ifdef NEW_MACHINE_DEBUG
extern char *NEW_MACHINE_STATE_NAMES[];
#endif

typedef struct _newMachine_struct_ NEW_MACHINE, *pNEW_MACHINE;
#undef FSM_TYPE_PTR
#define FSM_TYPE_PTR pNEW_MACHINE
extern NEW_MACHINE newMachine;

extern pNEW_MACHINE pnewMachine;

typedef NEW_MACHINE_EVENT (*NEW_MACHINE_ACTION_FN)(pNEW_MACHINE);

typedef NEW_MACHINE_STATE (*NEW_MACHINE_TRANSITION_FN)(pNEW_MACHINE,NEW_MACHINE_EVENT);

typedef void (*NEW_MACHINE_FSM)(pNEW_MACHINE,NEW_MACHINE_EVENT);

void newMachineFSM(pNEW_MACHINE,NEW_MACHINE_EVENT);

/* Sub Machine Declarations */

/* enumerate sub-machines */
typedef enum {
	 newMachine_subMachine1
	, newMachine_firstSubMachine = newMachine_subMachine1
	,  newMachine_subMachine2
	, newMachine_numSubMachines
} NEW_MACHINE_SUB_MACHINES;

typedef NEW_MACHINE_EVENT (*NEW_MACHINE_SUB_MACHINE_FN)(NEW_MACHINE_EVENT);
typedef struct _newMachine_sub_fsm_if_ NEW_MACHINE_SUB_FSM_IF, *pNEW_MACHINE_SUB_FSM_IF;
struct _newMachine_sub_fsm_if_
{
	NEW_MACHINE_EVENT                first_event;
	NEW_MACHINE_EVENT                last_event;
	NEW_MACHINE_SUB_MACHINE_FN       subFSM;
};

extern pNEW_MACHINE_SUB_FSM_IF newMachine_sub_fsm_if_array[newMachine_numSubMachines];

extern NEW_MACHINE_SUB_FSM_IF subMachine1_sub_fsm_if;
extern NEW_MACHINE_SUB_FSM_IF subMachine2_sub_fsm_if;

typedef NEW_MACHINE_EVENT (*NEW_MACHINE_STATE_FN)(pNEW_MACHINE,NEW_MACHINE_EVENT);

extern const NEW_MACHINE_STATE_FN newMachine_state_fn_array[newMachine_numStates];

struct _newMachine_struct_ {
	NEW_MACHINE_STATE					state;
	NEW_MACHINE_EVENT					event;
	NEW_MACHINE_STATE_FN const	(*statesArray)[newMachine_numStates];
	pNEW_MACHINE_SUB_FSM_IF	(*subMachineArray)[newMachine_numSubMachines];
	NEW_MACHINE_FSM						fsm;
};

NEW_MACHINE_EVENT newMachine_s1_stateFn(pNEW_MACHINE,NEW_MACHINE_EVENT);
NEW_MACHINE_EVENT newMachine_s2_stateFn(pNEW_MACHINE,NEW_MACHINE_EVENT);
NEW_MACHINE_EVENT newMachine_s3_stateFn(pNEW_MACHINE,NEW_MACHINE_EVENT);

NEW_MACHINE_EVENT newMachine_a1(pNEW_MACHINE);
NEW_MACHINE_EVENT newMachine_a2(pNEW_MACHINE);

void newMachine_baz(pNEW_MACHINE,NEW_MACHINE_STATE);

NEW_MACHINE_STATE newMachine_transitionFn(pNEW_MACHINE,NEW_MACHINE_EVENT);
NEW_MACHINE_STATE newMachine_transitionFn1(pNEW_MACHINE,NEW_MACHINE_EVENT);

#endif
