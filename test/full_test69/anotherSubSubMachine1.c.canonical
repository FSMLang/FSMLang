/**
	anotherSubSubMachine1.c

	This file automatically generated by FSMLang
*/

#include "anotherSubSubMachine1.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif


const ANOTHER_SUB_SUB_MACHINE1_STATE_FN anotherSubSubMachine1_state_fn_array[anotherSubSubMachine1_numStates] = 
{
	  anotherSubSubMachine1_z1_stateFn
	, anotherSubSubMachine1_z2_stateFn
};

ANOTHER_SUB_MACHINE1_EVENT anotherSubSubMachine1_sub_machine_fn(ANOTHER_SUB_MACHINE1_EVENT e)
{
	return anotherSubSubMachine1FSM(panotherSubSubMachine1, e);
}


ANOTHER_SUB_MACHINE1_SUB_FSM_IF anotherSubSubMachine1_sub_fsm_if =
{
		.subFSM = anotherSubSubMachine1_sub_machine_fn
	, .first_event = anotherSubMachine1_anotherSubSubMachine1_y1
	, .last_event = anotherSubMachine1_anotherSubSubMachine1_ee1
};

ANOTHER_SUB_MACHINE1_SHARED_EVENT_STR anotherSubSubMachine1_share_anotherSubMachine1_e1_str = {
	  .event               = THIS(e1)
	, .data_translation_fn = NULL
	, .psub_fsm_if         = &anotherSubSubMachine1_sub_fsm_if
};

ANOTHER_SUB_MACHINE1_SHARED_EVENT_STR anotherSubSubMachine1_share_anotherSubMachine1_ee1_str = {
	  .event               = THIS(ee1)
	, .data_translation_fn = NULL
	, .psub_fsm_if         = &anotherSubSubMachine1_sub_fsm_if
};

ANOTHER_SUB_SUB_MACHINE1 anotherSubSubMachine1 = {
	anotherSubSubMachine1_z1,
	anotherSubMachine1_anotherSubSubMachine1_y1,
	&anotherSubSubMachine1_state_fn_array,
	anotherSubSubMachine1FSM
};

pANOTHER_SUB_SUB_MACHINE1 panotherSubSubMachine1 = &anotherSubSubMachine1;


#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
ANOTHER_SUB_MACHINE1_EVENT anotherSubSubMachine1FSM(pANOTHER_SUB_SUB_MACHINE1 pfsm, ANOTHER_SUB_MACHINE1_EVENT event)
{
	ANOTHER_SUB_MACHINE1_EVENT e = event;

	while (
		(e != THIS(noEvent))
		&& (e >= THIS(y1))
	)
	{

#ifdef ANOTHER_SUB_SUB_MACHINE1_DEBUG
if (EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
{
	DBG_PRINTF("event: %s; state: %s"
,ANOTHER_SUB_SUB_MACHINE1_EVENT_NAMES[e - THIS(y1)]
,ANOTHER_SUB_SUB_MACHINE1_STATE_NAMES[pfsm->state]
);
}
#endif

	/* This is read-only data to facilitate error reporting in action functions */
	pfsm->event = e;

		e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));

	}

	return e == THIS(noEvent) ? PARENT(noEvent) : e;
}

ANOTHER_SUB_MACHINE1_EVENT anotherSubSubMachine1_z1_stateFn(pANOTHER_SUB_SUB_MACHINE1 pfsm, ANOTHER_SUB_MACHINE1_EVENT e)
{
	ANOTHER_SUB_MACHINE1_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(y1):
		retVal = anotherSubSubMachine1_x1(pfsm);
		break;
	case THIS(y2):
		retVal = anotherSubSubMachine1_x2(pfsm);
		pfsm->state = anotherSubSubMachine1_z2;
		break;
	default:
		DBG_PRINTF("anotherSubSubMachine1_noAction");
		break;
	}

	return retVal;
}

ANOTHER_SUB_MACHINE1_EVENT anotherSubSubMachine1_z2_stateFn(pANOTHER_SUB_SUB_MACHINE1 pfsm, ANOTHER_SUB_MACHINE1_EVENT e)
{
	ANOTHER_SUB_MACHINE1_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherSubSubMachine1_noAction");
		break;
	}

	return retVal;
/* we only just now know we did not use this */
	(void) pfsm;
}


ANOTHER_SUB_MACHINE1_EVENT __attribute__((weak)) anotherSubSubMachine1_x1(pANOTHER_SUB_SUB_MACHINE1 pfsm)
{
	DBG_PRINTF("weak: anotherSubSubMachine1_x1");
	(void) pfsm;
	return THIS(noEvent);
}

ANOTHER_SUB_MACHINE1_EVENT __attribute__((weak)) anotherSubSubMachine1_x2(pANOTHER_SUB_SUB_MACHINE1 pfsm)
{
	DBG_PRINTF("weak: anotherSubSubMachine1_x2");
	(void) pfsm;
	return THIS(noEvent);
}



#ifdef ANOTHER_SUB_SUB_MACHINE1_DEBUG
char *ANOTHER_SUB_SUB_MACHINE1_EVENT_NAMES[] = {
	 "anotherSubSubMachine1_y1"
	, "anotherSubSubMachine1_y2"
	, "anotherSubSubMachine1_e1"
	, "anotherSubSubMachine1_ee1"
	, "anotherSubSubMachine1_noEvent"
	, "anotherSubSubMachine1_numEvents"
};

char *ANOTHER_SUB_SUB_MACHINE1_STATE_NAMES[] = {
	 "anotherSubSubMachine1_z1"
	,"anotherSubSubMachine1_z2"
};

#endif
