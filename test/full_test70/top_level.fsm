/*
	Here are some comments
*/
native prologue
{
#include "test.h"
#define NUM_INTS (2)
#define NUM_CHARS (20)
#define INIT_FSM_DATA {.u.bop = {0}  \
                       , .u.foo.a = {0}  \
                       , .u.foo.count_ints = 0                    \
                       , .u.beep.f = 0                            \
                       }

#undef  FSM_END_CRITICAL

}

native epilogue
{
#define FSM_START_CRITICAL do_start_critical();
#define FSM_END_CRITICAL do_end_critical();
}

reentrant machine newMachine
 on transition baz;
 native impl prologue
 {
	static void do_start_critical(void);
	static void do_end_critical(void);
 }

 native impl epilogue
 {
	static void do_start_critical()
   {
     DBG_PRINTF("do_start_critical");
   }

	static void do_end_critical()
   {
     DBG_PRINTF("do_end_critical");
   }
 }
{
data
{

 struct
 {
  struct 
  {
  	int a[NUM_INTS];
	int count_ints;
  } foo;
  
  struct
  {
   float f;
  } beep;
 
  int   e3_int;
  char  bop[NUM_CHARS];
 } u;

}

event e1 data 
 {
  char  *  cp;
 }
, e2 data
 {
   int   i;
   float f;
 }
 ;

event e3 data 
 {
   int i;
   struct
   {
     int i;
     float f;
   } s;
 }
 ;

event e4;

event eShared;

state s1, s2, s3, s4;

	/** a sub machine */
  native
  {
  #if defined(INIT_FSM_DATA)
  #undef INIT_FSM_DATA
  #endif
  #define INIT_FSM_DATA { .cp = NULL }
  }
  machine subMachine1 {
		data
      {
			char *cp;
      }
		state ss1 on entry foo on exit bar
           , ss2 on entry on exit
           , ss3 on entry foo1
           , ss4 on exit bar1
           ;
		event parent::eShared data translator eShared_dt 
            , ee2 , ee3
            ;

		action aa1[eShared,ss1] transition ss2;
		action aa2[ee2, ss1] transition ss3;
	}

	/** a second sub machine */
  machine subMachine2 {
		state sss1, sss2, sss3;
		event eee1, eee2, eee3;

		action aaa1[eee1,sss1] transition sss2;
		action aaa2[eee2, sss1] transition sss3;
	}

	//This is a one-line comment
	action a1[e1,s1];

	/**
		A Document Comment
	*/
	action a2[e1,(s2,s3)] transition transitionFn;
	transition[(e2,e3),(s1,s2,s3)] transitionFn1;

	transition [e4, (s1, s2, s3)] s4;

	action doNothing[(e1, e2, e3, e4), s4];

	action shareSharedEvent[eShared,(all)];

	transitionFn  returns s1,s2;
	transitionFn1 returns s2,s3;

	a2 returns noEvent;

}

