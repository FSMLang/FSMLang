/**
	subMachine2.c

	This file automatically generated by FSMLang
*/

#include "subMachine2_priv.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif

static NEW_MACHINE_EVENT subMachine2FSM(FSM_TYPE_PTR,NEW_MACHINE_EVENT);

static NEW_MACHINE_EVENT sss1_stateFn(pSUB_MACHINE2,NEW_MACHINE_EVENT);
static NEW_MACHINE_EVENT sss2_stateFn(pSUB_MACHINE2,NEW_MACHINE_EVENT);
static NEW_MACHINE_EVENT sss3_stateFn(pSUB_MACHINE2,NEW_MACHINE_EVENT);

static const SUB_MACHINE2_STATE_FN subMachine2_state_fn_array[subMachine2_numStates] = 
{
	  sss1_stateFn
	, sss2_stateFn
	, sss3_stateFn
};

NEW_MACHINE_EVENT THIS(sub_machine_fn)(NEW_MACHINE_EVENT e)
{
	return subMachine2FSM(psubMachine2,e);
}

NEW_MACHINE_SUB_FSM_IF newMachine_subMachine2_sub_fsm_if =
{
		.subFSM = THIS(sub_machine_fn)
	, .first_event = THIS(firstEvent)
	, .last_event = THIS(noEvent)
};

SUB_MACHINE2 subMachine2 = {
	subMachine2_sss1,
	THIS(eee1),
	&subMachine2_state_fn_array,
	subMachine2FSM
};

pSUB_MACHINE2 psubMachine2 = &subMachine2;


#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
NEW_MACHINE_EVENT subMachine2FSM(pSUB_MACHINE2 pfsm, NEW_MACHINE_EVENT event)
{
	NEW_MACHINE_EVENT e = event;

	while ((e != THIS(noEvent))
	       && (e >= THIS(firstEvent))
	      )
	{

#ifdef SUB_MACHINE2_DEBUG
if ((EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
    && (e >= THIS(firstEvent))
    && (e < THIS(noEvent))
   )
{
	DBG_PRINTF("event: %s; state: %s"
,SUB_MACHINE2_EVENT_NAMES[e - THIS(firstEvent)]
,SUB_MACHINE2_STATE_NAMES[pfsm->state]
);
}
#endif

		/* This is read-only data to facilitate error reporting in action functions */
		pfsm->event = e;

		if ((e >= THIS(firstEvent))
		    && (e < THIS(noEvent))
			)
		{
		e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));
		}

	}

	return e == THIS(noEvent) ? PARENT(noEvent) : e;
}

static NEW_MACHINE_EVENT sss1_stateFn(pSUB_MACHINE2 pfsm,NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(eee1):
		retVal = UFMN(aaa1)(pfsm);
		pfsm->state = subMachine2_sss2;
		break;
	case THIS(eee2):
		retVal = UFMN(aaa2)(pfsm);
		pfsm->state = subMachine2_sss3;
		break;
	default:
		DBG_PRINTF("newMachine_subMachine2_noAction");
		break;
	}

	return retVal;
}

static NEW_MACHINE_EVENT sss2_stateFn(pSUB_MACHINE2 pfsm,NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("newMachine_subMachine2_noAction");
		break;
	}

	/* we only just now know we did not use this */
	(void) pfsm;

	return retVal;
}

static NEW_MACHINE_EVENT sss3_stateFn(pSUB_MACHINE2 pfsm,NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("newMachine_subMachine2_noAction");
		break;
	}

	/* we only just now know we did not use this */
	(void) pfsm;

	return retVal;
}


NEW_MACHINE_EVENT __attribute__((weak)) UFMN(aaa1)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return THIS(noEvent);
}

NEW_MACHINE_EVENT __attribute__((weak)) UFMN(aaa2)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return THIS(noEvent);
}


#ifdef SUB_MACHINE2_DEBUG
char *SUB_MACHINE2_EVENT_NAMES[] = {
	 "newMachine_subMachine2_eee1"
	,"newMachine_subMachine2_eee2"
	,"newMachine_subMachine2_eee3"
	, "subMachine2_noEvent"
	, "subMachine2_numEvents"
};

char *SUB_MACHINE2_STATE_NAMES[] = {
	 "newMachine_subMachine2_sss1"
	,"newMachine_subMachine2_sss2"
	,"newMachine_subMachine2_sss3"
};

#endif
