/**
	anotherSubMachine1.c

	This file automatically generated by FSMLang
*/

#include "anotherSubMachine1.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif


const ANOTHER_SUB_MACHINE1_STATE_FN anotherSubMachine1_state_fn_array[anotherSubMachine1_numStates] = 
{
	  anotherSubMachine1_ss1_stateFn
	, anotherSubMachine1_ss2_stateFn
	, anotherSubMachine1_ss3_stateFn
};

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_sub_machine_fn(ANOTHER_NEW_MACHINE_EVENT e)
{
	return anotherSubMachine1FSM(panotherSubMachine1, e);
}


ANOTHER_NEW_MACHINE_SUB_FSM_IF anotherSubMachine1_sub_fsm_if =
{
		.subFSM = anotherSubMachine1_sub_machine_fn
	, .first_event = anotherNewMachine_anotherSubMachine1_ee1
	, .last_event = anotherNewMachine_anotherSubMachine1_e1
};

ANOTHER_NEW_MACHINE_SHARED_EVENT_STR anotherSubMachine1_share_anotherNewMachine_e1_str = {
	  .event               = THIS(e1)
	, .data_translation_fn = NULL
	, .psub_fsm_if         = &anotherSubMachine1_sub_fsm_if
};


pANOTHER_SUB_MACHINE1_SUB_FSM_IF anotherSubMachine1_sub_fsm_if_array[anotherSubMachine1_numSubMachines] =
{
	&anotherSubSubMachine1_sub_fsm_if
};

pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharing_anotherSubMachine1_ee1[] =
{
	  &anotherSubSubMachine1_share_anotherSubMachine1_ee1_str
	, NULL
};

pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharing_anotherSubMachine1_e1[] =
{
	  &anotherSubSubMachine1_share_anotherSubMachine1_e1_str
	, NULL
};

ANOTHER_SUB_MACHINE1_EVENT anotherSubMachine1_pass_shared_event(pANOTHER_SUB_MACHINE1 pfsm, pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharer_list[])
{
	ANOTHER_SUB_MACHINE1_EVENT return_event = THIS(noEvent);
	for (pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR *pcurrent_sharer = sharer_list;
	     *pcurrent_sharer && return_event == anotherSubMachine1_noEvent;
	     pcurrent_sharer++)
	{
		if ((*pcurrent_sharer)->data_translation_fn)
			(*(*pcurrent_sharer)->data_translation_fn)(pfsm);
		return_event = (*(*pcurrent_sharer)->psub_fsm_if->subFSM)((*pcurrent_sharer)->event);
	}

	return return_event;
}

ANOTHER_SUB_MACHINE1 anotherSubMachine1 = {
	anotherSubMachine1_ss1,
	anotherNewMachine_anotherSubMachine1_ee1,
	&anotherSubMachine1_state_fn_array,
	&anotherSubMachine1_sub_fsm_if_array,
	anotherSubMachine1FSM
};

pANOTHER_SUB_MACHINE1 panotherSubMachine1 = &anotherSubMachine1;


#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1FSM(pANOTHER_SUB_MACHINE1 pfsm, ANOTHER_NEW_MACHINE_EVENT event)
{
	ANOTHER_NEW_MACHINE_EVENT e = event;

	while (
		(e != THIS(noEvent))
		&& (e >= THIS(ee1))
	)
	{

#ifdef ANOTHER_SUB_MACHINE1_DEBUG
if (EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
{
	DBG_PRINTF("event: %s; state: %s"
,ANOTHER_SUB_MACHINE1_EVENT_NAMES[e - THIS(ee1)]
,ANOTHER_SUB_MACHINE1_STATE_NAMES[pfsm->state]
);
}
#endif

	/* This is read-only data to facilitate error reporting in action functions */
	pfsm->event = e;

		e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));

	}

	return e == THIS(noEvent) ? PARENT(noEvent) : e;
}

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_ss1_stateFn(pANOTHER_SUB_MACHINE1 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(ee1):
		retVal = anotherSubMachine1_aa1(pfsm);
		pfsm->state = anotherSubMachine1_ss2;
		break;
	case THIS(ee2):
		retVal = anotherSubMachine1_aa2(pfsm);
		pfsm->state = anotherSubMachine1_ss3;
		break;
	default:
		DBG_PRINTF("anotherSubMachine1_noAction");
		break;
	}

	return retVal;
}

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_ss2_stateFn(pANOTHER_SUB_MACHINE1 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherSubMachine1_noAction");
		break;
	}

	return retVal;
/* we only just now know we did not use this */
	(void) pfsm;
}

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_ss3_stateFn(pANOTHER_SUB_MACHINE1 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherSubMachine1_noAction");
		break;
	}

	return retVal;
/* we only just now know we did not use this */
	(void) pfsm;
}


ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) anotherSubMachine1_aa1(pANOTHER_SUB_MACHINE1 pfsm)
{
	DBG_PRINTF("weak: anotherSubMachine1_aa1");
	(void) pfsm;
	return THIS(noEvent);
}

ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) anotherSubMachine1_aa2(pANOTHER_SUB_MACHINE1 pfsm)
{
	DBG_PRINTF("weak: anotherSubMachine1_aa2");
	(void) pfsm;
	return THIS(noEvent);
}



#ifdef ANOTHER_SUB_MACHINE1_DEBUG
char *ANOTHER_SUB_MACHINE1_EVENT_NAMES[] = {
	 "anotherSubMachine1_ee1"
	, "anotherSubMachine1_ee2"
	, "anotherSubMachine1_ee3"
	, "anotherSubMachine1_e1"
	, "anotherSubMachine1_noEvent"
	, "anotherSubMachine1_numEvents"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y1"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y2"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_e1"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_ee1"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_noEvent"
};

char *ANOTHER_SUB_MACHINE1_STATE_NAMES[] = {
	 "anotherSubMachine1_ss1"
	,"anotherSubMachine1_ss2"
	,"anotherSubMachine1_ss3"
};

#endif
