/**
	anotherSubMachine1.c

	This file automatically generated by FSMLang
*/

#include "anotherSubMachine1_priv.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif

static ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1FSM(FSM_TYPE_PTR,ANOTHER_NEW_MACHINE_EVENT);

extern ANOTHER_SUB_MACHINE1_SUB_FSM_IF anotherSubMachine1_anotherSubSubMachine1_sub_fsm_if;

static ANOTHER_NEW_MACHINE_EVENT ss1_stateFn(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);
static ANOTHER_NEW_MACHINE_EVENT ss2_stateFn(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);
static ANOTHER_NEW_MACHINE_EVENT ss3_stateFn(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);

static const ANOTHER_SUB_MACHINE1_STATE_FN anotherSubMachine1_state_fn_array[anotherSubMachine1_numStates] = 
{
	  ss1_stateFn
	, ss2_stateFn
	, ss3_stateFn
};

ANOTHER_NEW_MACHINE_EVENT THIS(sub_machine_fn)(ANOTHER_NEW_MACHINE_EVENT e)
{
	return anotherSubMachine1FSM(panotherSubMachine1,e);
}

ANOTHER_NEW_MACHINE_SUB_FSM_IF anotherNewMachine_anotherSubMachine1_sub_fsm_if =
{
		.subFSM = THIS(sub_machine_fn)
	, .first_event = THIS(firstEvent)
	, .last_event = THIS(lastEvent)
};

ANOTHER_NEW_MACHINE_SHARED_EVENT_STR anotherSubMachine1_share_anotherNewMachine_e1_str = {
	  .event               = THIS(e1)
	, .psub_fsm_if         = &anotherNewMachine_anotherSubMachine1_sub_fsm_if
};


const pANOTHER_SUB_MACHINE1_SUB_FSM_IF anotherSubMachine1_sub_fsm_if_array[THIS(numSubMachines)] =
{
	&anotherSubMachine1_anotherSubSubMachine1_sub_fsm_if
};

pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharing_anotherSubMachine1_ee1[] =
{
	  &anotherSubSubMachine1_share_anotherSubMachine1_ee1_str
	, NULL
};

pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharing_anotherSubMachine1_e1[] =
{
	  &anotherSubSubMachine1_share_anotherSubMachine1_e1_str
	, NULL
};

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_pass_shared_event(pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharer_list[])
{
	ANOTHER_NEW_MACHINE_EVENT return_event = THIS(noEvent);
	for (pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR *pcurrent_sharer = sharer_list;
	     *pcurrent_sharer && return_event == THIS(noEvent);
	     pcurrent_sharer++)
	{
		return_event = (*(*pcurrent_sharer)->psub_fsm_if->subFSM)((*pcurrent_sharer)->event);
	}

	return return_event;
}

ANOTHER_SUB_MACHINE1 anotherSubMachine1 = {
	anotherSubMachine1_ss1,
	THIS(ee1),
	&anotherSubMachine1_state_fn_array,
	&anotherSubMachine1_sub_fsm_if_array,
	anotherSubMachine1FSM
};

pANOTHER_SUB_MACHINE1 panotherSubMachine1 = &anotherSubMachine1;

static ANOTHER_NEW_MACHINE_EVENT findAndRunSubMachine(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);


#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1FSM(pANOTHER_SUB_MACHINE1 pfsm, ANOTHER_NEW_MACHINE_EVENT event)
{
	ANOTHER_NEW_MACHINE_EVENT e = event;

	while ((e != THIS(noEvent))
	       && (e >= THIS(firstEvent))

       && (e < THIS(lastEvent))	      )
	{

#ifdef ANOTHER_SUB_MACHINE1_DEBUG
if ((EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
    && (e >= THIS(firstEvent))
    && (e < THIS(noEvent))
   )
{
	DBG_PRINTF("event: %s; state: %s"
,ANOTHER_SUB_MACHINE1_EVENT_NAMES[e - THIS(firstEvent)]
,ANOTHER_SUB_MACHINE1_STATE_NAMES[pfsm->state]
);
}
#endif

		/* This is read-only data to facilitate error reporting in action functions */
		pfsm->event = e;

		if ((e >= THIS(firstEvent))
		    && (e < THIS(noEvent))
			)
		{
		e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));
		}

		if ((e > THIS(noEvent))
			&& (e < THIS(lastEvent)))
		{
			e = findAndRunSubMachine(pfsm, e);
		}

	}

	return e == THIS(noEvent) ? PARENT(noEvent) : e;
}


static ANOTHER_NEW_MACHINE_EVENT findAndRunSubMachine(pANOTHER_SUB_MACHINE1 pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	for (ANOTHER_SUB_MACHINE1_SUB_MACHINES machineIterator = THIS(firstSubMachine);
	     machineIterator < THIS(numSubMachines);
	     machineIterator++
	    )
	{
			if (
			   ((*pfsm->subMachineArray)[machineIterator]->first_event <= e)
			   && ((*pfsm->subMachineArray)[machineIterator]->last_event > e)
			    )
			{
				return ((*(*pfsm->subMachineArray)[machineIterator]->subFSM)(e));
			}
	}

	return THIS(noEvent);

}

static ANOTHER_NEW_MACHINE_EVENT ss1_stateFn(pANOTHER_SUB_MACHINE1 pfsm,ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	case THIS(ee1):
		retVal = UFMN(aa1)(pfsm);
		pfsm->state = anotherSubMachine1_ss2;
		break;
	case THIS(ee2):
		retVal = UFMN(aa2)(pfsm);
		pfsm->state = anotherSubMachine1_ss3;
		break;
	default:
		DBG_PRINTF("anotherNewMachine_anotherSubMachine1_noAction");
		break;
	}

	return retVal;
}

static ANOTHER_NEW_MACHINE_EVENT ss2_stateFn(pANOTHER_SUB_MACHINE1 pfsm,ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherNewMachine_anotherSubMachine1_noAction");
		break;
	}

	/* we only just now know we did not use this */
	(void) pfsm;

	return retVal;
}

static ANOTHER_NEW_MACHINE_EVENT ss3_stateFn(pANOTHER_SUB_MACHINE1 pfsm,ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = THIS(noEvent);

	switch(e)
	{
	default:
		DBG_PRINTF("anotherNewMachine_anotherSubMachine1_noAction");
		break;
	}

	/* we only just now know we did not use this */
	(void) pfsm;

	return retVal;
}


ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) UFMN(aa1)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return anotherSubMachine1_pass_shared_event(sharing_anotherSubMachine1_ee1);
}

ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) UFMN(aa2)(FSM_TYPE_PTR pfsm)
{
	DBG_PRINTF("weak: %s", __func__);
	(void) pfsm;
	return THIS(noEvent);
}


#ifdef ANOTHER_SUB_MACHINE1_DEBUG
char *ANOTHER_SUB_MACHINE1_EVENT_NAMES[] = {
	 "anotherNewMachine_anotherSubMachine1_ee1"
	,"anotherNewMachine_anotherSubMachine1_ee2"
	,"anotherNewMachine_anotherSubMachine1_ee3"
	,"anotherNewMachine_anotherSubMachine1_e1"
	, "anotherSubMachine1_noEvent"
	, "anotherSubMachine1_numEvents"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y1"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_y2"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_e1"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_ee1"
	, "anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1_noEvent"
};

char *ANOTHER_SUB_MACHINE1_STATE_NAMES[] = {
	 "anotherNewMachine_anotherSubMachine1_ss1"
	,"anotherNewMachine_anotherSubMachine1_ss2"
	,"anotherNewMachine_anotherSubMachine1_ss3"
};

#endif
