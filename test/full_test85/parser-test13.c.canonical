/**
	parser-test13.c

	This file automatically generated by FSMLang
*/

#include "parser-test13.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif

const NEW_MACHINE_STATE_FN newMachine_state_fn_array[newMachine_numStates] = 
{
	  newMachine_s1_stateFn
	, newMachine_s2_stateFn
	, newMachine_s3_stateFn
};


pNEW_MACHINE_SUB_FSM_IF newMachine_sub_fsm_if_array[newMachine_numSubMachines] =
{
	&subMachine1_sub_fsm_if
	, &subMachine2_sub_fsm_if
};

NEW_MACHINE newMachine = {
	newMachine_s1,
	newMachine_e1,
	&newMachine_state_fn_array,
	&newMachine_sub_fsm_if_array,
	newMachineFSM
};

pNEW_MACHINE pnewMachine = &newMachine;

static NEW_MACHINE_EVENT findAndRunSubMachine(pNEW_MACHINE,NEW_MACHINE_EVENT);

static NEW_MACHINE_EVENT checkWhetherEventIsHandledInAllStates(pNEW_MACHINE,NEW_MACHINE_EVENT);

#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
void newMachineFSM(pNEW_MACHINE pfsm, NEW_MACHINE_EVENT event)
{
	NEW_MACHINE_EVENT e = event;

	while (e != newMachine_noEvent) {

#ifdef NEW_MACHINE_DEBUG
if (EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
{
	DBG_PRINTF("event: %s; state: %s"
,NEW_MACHINE_EVENT_NAMES[e]
,NEW_MACHINE_STATE_NAMES[pfsm->state]
);
}
#endif

	/* This is read-only data to facilitate error reporting in action functions */
	pfsm->event = e;

		if (e < newMachine_noEvent)
		{
			if ((e = checkWhetherEventIsHandledInAllStates(pfsm,e)) != THIS(noEvent))
				e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));
		}
		else
		{
			e = findAndRunSubMachine(pfsm, e);
		}

	}
}


static NEW_MACHINE_EVENT findAndRunSubMachine(pNEW_MACHINE pfsm, NEW_MACHINE_EVENT e)
{
	for (NEW_MACHINE_SUB_MACHINES machineIterator = newMachine_firstSubMachine;
	     machineIterator < newMachine_numSubMachines;
	     machineIterator++
	    )
	{
			if (
			   ((*pfsm->subMachineArray)[machineIterator]->first_event <= e)
			   && ((*pfsm->subMachineArray)[machineIterator]->last_event >= e)
			    )
			{
				return ((*(*pfsm->subMachineArray)[machineIterator]->subFSM)(e));
			}
	}

	return newMachine_noEvent;

}

static NEW_MACHINE_EVENT checkWhetherEventIsHandledInAllStates(pNEW_MACHINE pfsm, NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal;
	NEW_MACHINE_STATE new_s = pfsm->state;

	switch (e)
	{
		case newMachine_e2:
			new_s = newMachine_transitionFn1(pfsm,e);
			retVal = newMachine_noEvent;
			break;
		case newMachine_e3:
			new_s = newMachine_transitionFn1(pfsm,e);
			retVal = newMachine_noEvent;
			break;
		default:
			retVal = e;
			break;
	}

	if (pfsm->state != new_s)
	{
		newMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	 return retVal;

}

NEW_MACHINE_EVENT newMachine_s1_stateFn(pNEW_MACHINE pfsm, NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal = newMachine_noEvent;
	NEW_MACHINE_STATE new_s  = newMachine_s1;

	switch(e)
	{
	case newMachine_e1:
		retVal = newMachine_a1(pfsm);
		new_s = newMachine_s1;
		break;
	default:
		DBG_PRINTF("newMachine_noAction");
		break;
	}


	if (newMachine_s1 != new_s)
	{
		newMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	return retVal;
}

NEW_MACHINE_EVENT newMachine_s2_stateFn(pNEW_MACHINE pfsm, NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal = newMachine_noEvent;
	NEW_MACHINE_STATE new_s  = newMachine_s2;

	switch(e)
	{
	case newMachine_e1:
		retVal = newMachine_a2(pfsm);
		new_s = newMachine_transitionFn(pfsm,e);
		break;
	default:
		DBG_PRINTF("newMachine_noAction");
		break;
	}


	if (newMachine_s2 != new_s)
	{
		newMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	return retVal;
}

NEW_MACHINE_EVENT newMachine_s3_stateFn(pNEW_MACHINE pfsm, NEW_MACHINE_EVENT e)
{
	NEW_MACHINE_EVENT retVal = newMachine_noEvent;
	NEW_MACHINE_STATE new_s  = newMachine_s3;

	switch(e)
	{
	case newMachine_e1:
		retVal = newMachine_a2(pfsm);
		new_s = newMachine_transitionFn(pfsm,e);
		break;
	default:
		DBG_PRINTF("newMachine_noAction");
		break;
	}


	if (newMachine_s3 != new_s)
	{
		newMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	return retVal;
}


NEW_MACHINE_EVENT __attribute__((weak)) newMachine_a1(pNEW_MACHINE pfsm)
{
	DBG_PRINTF("weak: newMachine_a1");
	(void) pfsm;
	return THIS(noEvent);
}

NEW_MACHINE_EVENT __attribute__((weak)) newMachine_a2(pNEW_MACHINE pfsm)
{
	DBG_PRINTF("weak: newMachine_a2");
	(void) pfsm;
	return THIS(noEvent);
}


#ifdef NEW_MACHINE_DEBUG
char *NEW_MACHINE_EVENT_NAMES[] = {
	 "newMachine_e1"
	, "newMachine_e2"
	, "newMachine_e3"
	, "newMachine_e4"
	, "newMachine_noEvent"
	, "newMachine_numEvents"
	, "newMachine_subMachine1_ee1"
	, "newMachine_subMachine1_ee2"
	, "newMachine_subMachine1_ee3"
	, "newMachine_subMachine1_noEvent"
	, "newMachine_subMachine2_eee1"
	, "newMachine_subMachine2_eee2"
	, "newMachine_subMachine2_eee3"
	, "newMachine_subMachine2_noEvent"
};

char *NEW_MACHINE_STATE_NAMES[] = {
	 "newMachine_s1"
	,"newMachine_s2"
	,"newMachine_s3"
};

#endif
