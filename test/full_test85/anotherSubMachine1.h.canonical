/**
	anotherSubMachine1.h

	This file automatically generated by FSMLang
*/

#ifndef _ANOTHERSUBMACHINE1_H_
#define _ANOTHERSUBMACHINE1_H_

#include "another.h"

#ifdef ANOTHER_SUB_MACHINE1_DEBUG
#include <stdio.h>
#include <stdlib.h>
#endif

#define DECLARE_ANOTHER_SUB_MACHINE1_MACHINE(A) \
ANOTHER_SUB_MACHINE1 A =\
{\
	anotherSubMachine1_ss1,\n	anotherSubMachine1_anotherNewMachine_noEvent,\
	&anotherSubMachine1_state_fn_array,\
	anotherSubMachine1FSM\
};\
ANOTHER_SUB_MACHINE1 *p##A = &(A);

/*
	sub-machine events are included in the top-level machine event enumeration.
	These macros set the appropriate names for events from THIS machine
	and those from the PARENT machine.

	They may be turned off as needed.
*/
#ifndef NO_EVENT_CONVENIENCE_MACROS
#undef THIS
#define THIS(A) anotherNewMachine_anotherSubMachine1_##A
#define PARENT(A) anotherNewMachine_##A
#endif

#ifdef ANOTHER_SUB_MACHINE1_DEBUG
extern char *ANOTHER_SUB_MACHINE1_EVENT_NAMES[];
#endif

typedef enum {
	 anotherSubMachine1_ss1
	, anotherSubMachine1_ss2
	, anotherSubMachine1_ss3
	, anotherSubMachine1_numStates
} ANOTHER_SUB_MACHINE1_STATE;

#ifdef ANOTHER_SUB_MACHINE1_DEBUG
extern char *ANOTHER_SUB_MACHINE1_STATE_NAMES[];
#endif

typedef struct _anotherSubMachine1_struct_ ANOTHER_SUB_MACHINE1, *pANOTHER_SUB_MACHINE1;
#undef FSM_TYPE_PTR
#define FSM_TYPE_PTR pANOTHER_SUB_MACHINE1
extern ANOTHER_SUB_MACHINE1 anotherSubMachine1;

extern pANOTHER_SUB_MACHINE1 panotherSubMachine1;

typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_SUB_MACHINE1_ACTION_FN)(pANOTHER_SUB_MACHINE1);

typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_SUB_MACHINE1_FSM)(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1FSM(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);

/* Sub Machine Declarations */

/* enumerate sub-machines */
typedef enum {
	 anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1
	, anotherNewMachine_anotherSubMachine1_firstSubMachine = anotherNewMachine_anotherSubMachine1_anotherSubSubMachine1
	, anotherSubMachine1_numSubMachines
} ANOTHER_NEW_MACHINE_ANOTHER_SUB_MACHINE1_SUB_MACHINES;

typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_SUB_MACHINE1_SUB_MACHINE_FN)(ANOTHER_NEW_MACHINE_EVENT);
typedef struct _anotherSubMachine1_sub_fsm_if_ ANOTHER_SUB_MACHINE1_SUB_FSM_IF, *pANOTHER_SUB_MACHINE1_SUB_FSM_IF;
struct _anotherSubMachine1_sub_fsm_if_
{
	ANOTHER_NEW_MACHINE_EVENT                first_event;
	ANOTHER_NEW_MACHINE_EVENT                last_event;
	ANOTHER_SUB_MACHINE1_SUB_MACHINE_FN       subFSM;
};

extern pANOTHER_SUB_MACHINE1_SUB_FSM_IF anotherNewMachine_anotherSubMachine1_sub_fsm_if_array[anotherSubMachine1_numSubMachines];

extern ANOTHER_SUB_MACHINE1_SUB_FSM_IF anotherSubSubMachine1_sub_fsm_if;

/* Some sub-machines share parent events. */
typedef void (*ANOTHER_SUB_MACHINE1_DATA_TRANSLATION_FN)(pANOTHER_SUB_MACHINE1);
typedef struct _anotherSubMachine1_shared_event_str_ ANOTHER_SUB_MACHINE1_SHARED_EVENT_STR, *pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR;
struct _anotherSubMachine1_shared_event_str_
{	ANOTHER_NEW_MACHINE_EVENT      event;
	ANOTHER_NEW_MACHINE_ANOTHER_SUB_MACHINE1_DATA_TRANSLATION_FN  data_translation_fn;
	pANOTHER_SUB_MACHINE1_SUB_FSM_IF          psub_fsm_if;
};
extern ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_pass_shared_event(pANOTHER_SUB_MACHINE1,pANOTHER_NEW_MACHINE_ANOTHER_SUB_MACHINE1_SHARED_EVENT_STR[]);

bar extern ANOTHER_SUB_MACHINE1_SHARED_EVENT_STR anotherSubSubMachine1_share_anotherSubMachine1_ee1_str;
foo extern pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharing_anotherSubMachine1_ee1[];

bar extern ANOTHER_SUB_MACHINE1_SHARED_EVENT_STR anotherSubSubMachine1_share_anotherSubMachine1_e1_str;
foo extern pANOTHER_SUB_MACHINE1_SHARED_EVENT_STR sharing_anotherSubMachine1_e1[];


typedef ANOTHER_NEW_MACHINE_EVENT (*ANOTHER_SUB_MACHINE1_STATE_FN)(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);

extern const ANOTHER_SUB_MACHINE1_STATE_FN anotherSubMachine1_state_fn_array[anotherSubMachine1_numStates];

struct _anotherSubMachine1_struct_ {
	ANOTHER_SUB_MACHINE1_STATE					state;
	ANOTHER_NEW_MACHINE_EVENT					event;
	ANOTHER_SUB_MACHINE1_STATE_FN const	(*statesArray)[anotherSubMachine1_numStates];
	pANOTHER_SUB_MACHINE1_SUB_FSM_IF	(*subMachineArray)[anotherSubMachine1_numSubMachines];
	ANOTHER_SUB_MACHINE1_FSM						fsm;
};

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_ss1_stateFn(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);
ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_ss2_stateFn(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);
ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_ss3_stateFn(pANOTHER_SUB_MACHINE1,ANOTHER_NEW_MACHINE_EVENT);

ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_aa1(pANOTHER_SUB_MACHINE1);
ANOTHER_NEW_MACHINE_EVENT anotherSubMachine1_aa2(pANOTHER_SUB_MACHINE1);

#endif
