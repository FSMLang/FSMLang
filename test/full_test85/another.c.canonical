/**
	another.c

	This file automatically generated by FSMLang
*/

#include "another.h"
#include <stddef.h>

#ifndef DBG_PRINTF
#define DBG_PRINTF(...)
#endif

const ANOTHER_NEW_MACHINE_STATE_FN anotherNewMachine_state_fn_array[anotherNewMachine_numStates] = 
{
	  anotherNewMachine_s1_stateFn
	, anotherNewMachine_s2_stateFn
	, anotherNewMachine_s3_stateFn
};


pANOTHER_NEW_MACHINE_SUB_FSM_IF anotherNewMachine_sub_fsm_if_array[anotherNewMachine_numSubMachines] =
{
	&anotherSubMachine1_sub_fsm_if
	, &anotherSubMachine2_sub_fsm_if
};

pANOTHER_NEW_MACHINE_SHARED_EVENT_STR sharing_anotherNewMachine_e1[] =
{
	  &anotherSubMachine1_share_anotherNewMachine_e1_str
	, NULL
};

ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_pass_shared_event(pANOTHER_NEW_MACHINE pfsm, pANOTHER_NEW_MACHINE_SHARED_EVENT_STR sharer_list[])
{
	ANOTHER_NEW_MACHINE_EVENT return_event = THIS(noEvent);
	for (pANOTHER_NEW_MACHINE_SHARED_EVENT_STR *pcurrent_sharer = sharer_list;
	     *pcurrent_sharer && return_event == anotherNewMachine_noEvent;
	     pcurrent_sharer++)
	{
		if ((*pcurrent_sharer)->data_translation_fn)
			(*(*pcurrent_sharer)->data_translation_fn)(pfsm);
		return_event = (*(*pcurrent_sharer)->psub_fsm_if->subFSM)((*pcurrent_sharer)->event);
	}

	return return_event;
}

ANOTHER_NEW_MACHINE anotherNewMachine = {
	anotherNewMachine_s1,
	anotherNewMachine_e1,
	&anotherNewMachine_state_fn_array,
	&anotherNewMachine_sub_fsm_if_array,
	anotherNewMachineFSM
};

pANOTHER_NEW_MACHINE panotherNewMachine = &anotherNewMachine;

static ANOTHER_NEW_MACHINE_EVENT findAndRunSubMachine(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

static ANOTHER_NEW_MACHINE_EVENT checkWhetherEventIsHandledInAllStates(pANOTHER_NEW_MACHINE,ANOTHER_NEW_MACHINE_EVENT);

#ifndef EVENT_IS_NOT_EXCLUDED_FROM_LOG
#define EVENT_IS_NOT_EXCLUDED_FROM_LOG(e) (e == e)
#endif
void anotherNewMachineFSM(pANOTHER_NEW_MACHINE pfsm, ANOTHER_NEW_MACHINE_EVENT event)
{
	ANOTHER_NEW_MACHINE_EVENT e = event;

	while (e != anotherNewMachine_noEvent) {

#ifdef ANOTHER_NEW_MACHINE_DEBUG
if (EVENT_IS_NOT_EXCLUDED_FROM_LOG(e))
{
	DBG_PRINTF("event: %s; state: %s"
,ANOTHER_NEW_MACHINE_EVENT_NAMES[e]
,ANOTHER_NEW_MACHINE_STATE_NAMES[pfsm->state]
);
}
#endif

	/* This is read-only data to facilitate error reporting in action functions */
	pfsm->event = e;

		if (e < anotherNewMachine_noEvent)
		{
			if ((e = checkWhetherEventIsHandledInAllStates(pfsm,e)) != THIS(noEvent))
				e = ((* (*pfsm->statesArray)[pfsm->state])(pfsm,e));
		}
		else
		{
			e = findAndRunSubMachine(pfsm, e);
		}

	}
}


static ANOTHER_NEW_MACHINE_EVENT findAndRunSubMachine(pANOTHER_NEW_MACHINE pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	for (ANOTHER_NEW_MACHINE_SUB_MACHINES machineIterator = anotherNewMachine_firstSubMachine;
	     machineIterator < anotherNewMachine_numSubMachines;
	     machineIterator++
	    )
	{
			if (
			   ((*pfsm->subMachineArray)[machineIterator]->first_event <= e)
			   && ((*pfsm->subMachineArray)[machineIterator]->last_event >= e)
			    )
			{
				return ((*(*pfsm->subMachineArray)[machineIterator]->subFSM)(e));
			}
	}

	return anotherNewMachine_noEvent;

}

static ANOTHER_NEW_MACHINE_EVENT checkWhetherEventIsHandledInAllStates(pANOTHER_NEW_MACHINE pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal;
	ANOTHER_NEW_MACHINE_STATE new_s = pfsm->state;

	switch (e)
	{
		case anotherNewMachine_e2:
			new_s = anotherNewMachine_transitionFn1(pfsm,e);
			retVal = anotherNewMachine_noEvent;
			break;
		case anotherNewMachine_e3:
			new_s = anotherNewMachine_transitionFn1(pfsm,e);
			retVal = anotherNewMachine_noEvent;
			break;
		default:
			retVal = e;
			break;
	}

	if (pfsm->state != new_s)
	{
		anotherNewMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	 return retVal;

}

ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_s1_stateFn(pANOTHER_NEW_MACHINE pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = anotherNewMachine_noEvent;
	ANOTHER_NEW_MACHINE_STATE new_s  = anotherNewMachine_s1;

	switch(e)
	{
	case anotherNewMachine_e1:
		retVal = anotherNewMachine_a1(pfsm);
		new_s = anotherNewMachine_s1;
		break;
	default:
		DBG_PRINTF("anotherNewMachine_noAction");
		break;
	}


	if (anotherNewMachine_s1 != new_s)
	{
		anotherNewMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	return retVal;
}

ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_s2_stateFn(pANOTHER_NEW_MACHINE pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = anotherNewMachine_noEvent;
	ANOTHER_NEW_MACHINE_STATE new_s  = anotherNewMachine_s2;

	switch(e)
	{
	case anotherNewMachine_e1:
		retVal = anotherNewMachine_a2(pfsm);
		new_s = anotherNewMachine_transitionFn(pfsm,e);
		break;
	default:
		DBG_PRINTF("anotherNewMachine_noAction");
		break;
	}


	if (anotherNewMachine_s2 != new_s)
	{
		anotherNewMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	return retVal;
}

ANOTHER_NEW_MACHINE_EVENT anotherNewMachine_s3_stateFn(pANOTHER_NEW_MACHINE pfsm, ANOTHER_NEW_MACHINE_EVENT e)
{
	ANOTHER_NEW_MACHINE_EVENT retVal = anotherNewMachine_noEvent;
	ANOTHER_NEW_MACHINE_STATE new_s  = anotherNewMachine_s3;

	switch(e)
	{
	case anotherNewMachine_e1:
		retVal = anotherNewMachine_a2(pfsm);
		new_s = anotherNewMachine_transitionFn(pfsm,e);
		break;
	default:
		DBG_PRINTF("anotherNewMachine_noAction");
		break;
	}


	if (anotherNewMachine_s3 != new_s)
	{
		anotherNewMachine_baz(pfsm,new_s);
		pfsm->state = new_s;

	}


	return retVal;
}


ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) anotherNewMachine_a1(pANOTHER_NEW_MACHINE pfsm)
{
	DBG_PRINTF("weak: anotherNewMachine_a1");
	(void) pfsm;
	return anotherNewMachine_pass_shared_event(pfsm, sharing_anotherNewMachine_e1);
}

ANOTHER_NEW_MACHINE_EVENT __attribute__((weak)) anotherNewMachine_a2(pANOTHER_NEW_MACHINE pfsm)
{
	DBG_PRINTF("weak: anotherNewMachine_a2");
	(void) pfsm;
	return anotherNewMachine_pass_shared_event(pfsm, sharing_anotherNewMachine_e1);
}


#ifdef ANOTHER_NEW_MACHINE_DEBUG
char *ANOTHER_NEW_MACHINE_EVENT_NAMES[] = {
	 "anotherNewMachine_e1"
	, "anotherNewMachine_e2"
	, "anotherNewMachine_e3"
	, "anotherNewMachine_e4"
	, "anotherNewMachine_noEvent"
	, "anotherNewMachine_numEvents"
	, "anotherNewMachine_anotherSubMachine1_ee1"
	, "anotherNewMachine_anotherSubMachine1_ee2"
	, "anotherNewMachine_anotherSubMachine1_ee3"
	, "anotherNewMachine_anotherSubMachine1_e1"
	, "anotherNewMachine_anotherSubMachine1_noEvent"
	, "anotherNewMachine_anotherSubMachine2_eee1"
	, "anotherNewMachine_anotherSubMachine2_eee2"
	, "anotherNewMachine_anotherSubMachine2_eee3"
	, "anotherNewMachine_anotherSubMachine2_noEvent"
};

char *ANOTHER_NEW_MACHINE_STATE_NAMES[] = {
	 "anotherNewMachine_s1"
	,"anotherNewMachine_s2"
	,"anotherNewMachine_s3"
};

#endif
